
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001044  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00001044  000010d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080009c  0080009c  00001114  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f7b  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe5  00000000  00000000  0000449b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d8b  00000000  00000000  00005480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a24  00000000  00000000  0000720c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fe5  00000000  00000000  00007c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002479  00000000  00000000  00008c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_1>
       8:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_2>
       c:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_3>
      10:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_4>
      14:	0c 94 6f 07 	jmp	0xede	; 0xede <__vector_5>
      18:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__vector_6>
      1c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_7>
      20:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_8>
      24:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_9>
      28:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_10>
      2c:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	e5 05       	cpc	r30, r5
      56:	ef 05       	cpc	r30, r15
      58:	f9 05       	cpc	r31, r9
      5a:	03 06       	cpc	r0, r19
      5c:	0d 06       	cpc	r0, r29
      5e:	17 06       	cpc	r1, r23
      60:	21 06       	cpc	r2, r17
      62:	2b 06       	cpc	r2, r27

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e4       	ldi	r30, 0x44	; 68
      78:	f0 e1       	ldi	r31, 0x10	; 16
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	ac e9       	ldi	r26, 0x9C	; 156
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ae 3b       	cpi	r26, 0xBE	; 190
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
      9a:	0c 94 20 08 	jmp	0x1040	; 0x1040 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <resume>:
}
/*-------------------------- Function to resume counting ----------------------------*/
void resume()
{
	// start clock
	CLEAR_BIT(TCCR0,CS00);
      a2:	83 b7       	in	r24, 0x33	; 51
      a4:	8e 7f       	andi	r24, 0xFE	; 254
      a6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
      a8:	83 b7       	in	r24, 0x33	; 51
      aa:	82 60       	ori	r24, 0x02	; 2
      ac:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
      ae:	83 b7       	in	r24, 0x33	; 51
      b0:	8b 7f       	andi	r24, 0xFB	; 251
      b2:	83 bf       	out	0x33, r24	; 51
      b4:	08 95       	ret

000000b6 <stop>:
}
/*-------------------------- Function to stop counting ----------------------------*/
void stop()
{
	// close clock
	CLEAR_BIT(TCCR0,CS00);
      b6:	83 b7       	in	r24, 0x33	; 51
      b8:	8e 7f       	andi	r24, 0xFE	; 254
      ba:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS01);
      bc:	83 b7       	in	r24, 0x33	; 51
      be:	8d 7f       	andi	r24, 0xFD	; 253
      c0:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	8b 7f       	andi	r24, 0xFB	; 251
      c6:	83 bf       	out	0x33, r24	; 51
      c8:	08 95       	ret

000000ca <start>:
volatile uint8_t hour=0;

/*-------------------------- Function to start counting  ----------------------------*/
void start()
{
	if (hour==0 && min==0 && sec==0)
      ca:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
      ce:	81 11       	cpse	r24, r1
      d0:	0d c0       	rjmp	.+26     	; 0xec <start+0x22>
      d2:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <min>
      d6:	81 11       	cpse	r24, r1
      d8:	09 c0       	rjmp	.+18     	; 0xec <start+0x22>
      da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      de:	81 11       	cpse	r24, r1
      e0:	05 c0       	rjmp	.+10     	; 0xec <start+0x22>
	{
		DIO_Writepin(PIND0,HIGH); // alarm on
      e2:	61 e0       	ldi	r22, 0x01	; 1
      e4:	88 e1       	ldi	r24, 0x18	; 24
      e6:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
      ea:	05 c0       	rjmp	.+10     	; 0xf6 <start+0x2c>
	}
	else
	{
		sec--;
      ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      f0:	81 50       	subi	r24, 0x01	; 1
      f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if (min!=0 && sec==0)
      f6:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <min>
      fa:	88 23       	and	r24, r24
      fc:	61 f0       	breq	.+24     	; 0x116 <start+0x4c>
      fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     102:	81 11       	cpse	r24, r1
     104:	08 c0       	rjmp	.+16     	; 0x116 <start+0x4c>
	{
		sec=60;
     106:	8c e3       	ldi	r24, 0x3C	; 60
     108:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		min--;
     10c:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <min>
     110:	81 50       	subi	r24, 0x01	; 1
     112:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <min>
	}
	if (hour!=0 && min==0 && sec==0)
     116:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
     11a:	88 23       	and	r24, r24
     11c:	81 f0       	breq	.+32     	; 0x13e <start+0x74>
     11e:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <min>
     122:	81 11       	cpse	r24, r1
     124:	0c c0       	rjmp	.+24     	; 0x13e <start+0x74>
     126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     12a:	81 11       	cpse	r24, r1
     12c:	08 c0       	rjmp	.+16     	; 0x13e <start+0x74>
	{
		min=60;
     12e:	8c e3       	ldi	r24, 0x3C	; 60
     130:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <min>
		hour--;
     134:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>
     13e:	08 95       	ret

00000140 <reset>:
	}
}
/*-------------------------- Function to reset counting start ----------------------------*/
void reset()
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	uint8_t n1=0;
	uint8_t count=0;
     144:	c0 e0       	ldi	r28, 0x00	; 0
	}
}
/*-------------------------- Function to reset counting start ----------------------------*/
void reset()
{
	uint8_t n1=0;
     146:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t count=0;
	while(1)
	{
		uint8_t x = keypad_Data();
     148:	0e 94 19 01 	call	0x232	; 0x232 <keypad_Data>
		if (x != DEFAULT_KEY)
     14c:	8e 32       	cpi	r24, 0x2E	; 46
     14e:	e1 f3       	breq	.-8      	; 0x148 <reset+0x8>
		{
			if (x>='0' && x<='9')
     150:	90 ed       	ldi	r25, 0xD0	; 208
     152:	98 0f       	add	r25, r24
     154:	9a 30       	cpi	r25, 0x0A	; 10
     156:	48 f4       	brcc	.+18     	; 0x16a <reset+0x2a>
			{
				n1=n1*10+(x-'0');
     158:	dd 0f       	add	r29, r29
     15a:	9d 2f       	mov	r25, r29
     15c:	99 0f       	add	r25, r25
     15e:	99 0f       	add	r25, r25
     160:	d9 0f       	add	r29, r25
     162:	8d 0f       	add	r24, r29
     164:	d0 ed       	ldi	r29, 0xD0	; 208
     166:	d8 0f       	add	r29, r24
				count++;
     168:	cf 5f       	subi	r28, 0xFF	; 255
			}
			if (count==2)
     16a:	c2 30       	cpi	r28, 0x02	; 2
     16c:	19 f4       	brne	.+6      	; 0x174 <reset+0x34>
			{
				hour=n1;
     16e:	d0 93 9c 00 	sts	0x009C, r29	; 0x80009c <__data_end>
				n1=0;
     172:	d0 e0       	ldi	r29, 0x00	; 0
			}
			if (count==4)
     174:	c4 30       	cpi	r28, 0x04	; 4
     176:	19 f4       	brne	.+6      	; 0x17e <reset+0x3e>
			{
				min=n1;
     178:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <min>
				n1=0;
     17c:	d0 e0       	ldi	r29, 0x00	; 0
			}
			if (count==6)
     17e:	c6 30       	cpi	r28, 0x06	; 6
     180:	19 f7       	brne	.-58     	; 0x148 <reset+0x8>
			{
				sec=n1;
     182:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__DATA_REGION_ORIGIN__>
				n1=0;
				break;
			}
		}
	}
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <StopWatch_Call>:
	CLEAR_BIT(TCCR0,CS02);
}

void StopWatch_Call()
{
	sei();
     18c:	78 94       	sei
	Init_Pins();
     18e:	0e 94 be 03 	call	0x77c	; 0x77c <Init_Pins>
	LCD_Init();
     192:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Init>
	TIMER0_Init(CTC,TIMER0_SCALER_8,Disconnected);
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	62 e0       	ldi	r22, 0x02	; 2
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TIMER0_Init>
	EXI_Enable(EXI_0);
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <EXI_Enable>
	EXI_TriggerEdge(EXI_0,RISING_EDGE);
     1a6:	63 e0       	ldi	r22, 0x03	; 3
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	0e 94 8b 04 	call	0x916	; 0x916 <EXI_TriggerEdge>
	EXI_SetCallBack(EXI_0,stop);
     1ae:	6b e5       	ldi	r22, 0x5B	; 91
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <EXI_SetCallBack>
	EXI_Enable(EXI_1);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 e7 04 	call	0x9ce	; 0x9ce <EXI_Enable>
	EXI_TriggerEdge(EXI_1,RISING_EDGE);
     1be:	63 e0       	ldi	r22, 0x03	; 3
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 8b 04 	call	0x916	; 0x916 <EXI_TriggerEdge>
	EXI_SetCallBack(EXI_1,resume);
     1c6:	61 e5       	ldi	r22, 0x51	; 81
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <EXI_SetCallBack>
	EXI_Enable(EXI_2);
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <EXI_Enable>
	EXI_TriggerEdge(EXI_2,RISING_EDGE);
     1d6:	63 e0       	ldi	r22, 0x03	; 3
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	0e 94 8b 04 	call	0x916	; 0x916 <EXI_TriggerEdge>
	EXI_SetCallBack(EXI_2,reset);
     1de:	60 ea       	ldi	r22, 0xA0	; 160
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <EXI_SetCallBack>
	LCD_GOTO(0,3);
     1e8:	63 e0       	ldi	r22, 0x03	; 3
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_GOTO>
	LCD_WriteString("STOP WATCH");
     1f0:	81 e6       	ldi	r24, 0x61	; 97
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_WriteString>
	
	while(1)
	{
		TIMER0_SetInterrupt_ms(1,start);
     1f8:	65 e6       	ldi	r22, 0x65	; 101
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TIMER0_SetInterrupt_ms>
		LCD_GOTO(1,4);
     204:	64 e0       	ldi	r22, 0x04	; 4
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_GOTO>
		LCD_WriteNumber2D(hour);
     20c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
     210:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_WriteNumber2D>
		LCD_WriteChar(':');
     214:	8a e3       	ldi	r24, 0x3A	; 58
     216:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_WriteChar>
		LCD_WriteNumber2D(min);
     21a:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <min>
     21e:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_WriteNumber2D>
		LCD_WriteChar(':');
     222:	8a e3       	ldi	r24, 0x3A	; 58
     224:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_WriteChar>
		LCD_WriteNumber2D(sec);
     228:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     22c:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_WriteNumber2D>
     230:	e3 cf       	rjmp	.-58     	; 0x1f8 <StopWatch_Call+0x6c>

00000232 <keypad_Data>:
	{'c' , '0' , '=' , '+'}
};


uint8_t keypad_Data(void)
{
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
	uint8_t r , c , key = DEFAULT_KEY;
	// set all output pins to High
	DIO_Writepin(FIRST_OUT_Pin , HIGH);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	80 e1       	ldi	r24, 0x10	; 16
     240:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin + 1  , HIGH);
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	81 e1       	ldi	r24, 0x11	; 17
     248:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin + 2  , HIGH);
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	82 e1       	ldi	r24, 0x12	; 18
     250:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	83 e1       	ldi	r24, 0x13	; 19
     258:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
};


uint8_t keypad_Data(void)
{
	uint8_t r , c , key = DEFAULT_KEY;
     25c:	0f 2e       	mov	r0, r31
     25e:	fe e2       	ldi	r31, 0x2E	; 46
     260:	ff 2e       	mov	r15, r31
     262:	f0 2d       	mov	r31, r0
	DIO_Writepin(FIRST_OUT_Pin , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 1  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 2  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
	
	for(r = 0; r < ROW; r++)
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	27 c0       	rjmp	.+78     	; 0x2b6 <keypad_Data+0x84>
	{
		DIO_Writepin(FIRST_OUT_Pin + r  , LOW);		// set one output pin to Low
     268:	00 e1       	ldi	r16, 0x10	; 16
     26a:	01 0f       	add	r16, r17
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	80 2f       	mov	r24, r16
     270:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
		for(c = 0; c < COLUMN; c++)
     274:	d0 e0       	ldi	r29, 0x00	; 0
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <keypad_Data+0x76>
		{
			if(!DIO_Readpin(FIRST_INP_Pin + c))		// if you press the button --> reverse the signal and when row x column = Low
     278:	c4 e1       	ldi	r28, 0x14	; 20
     27a:	cd 0f       	add	r28, r29
     27c:	8c 2f       	mov	r24, r28
     27e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_Readpin>
     282:	81 11       	cpse	r24, r1
     284:	10 c0       	rjmp	.+32     	; 0x2a6 <keypad_Data+0x74>
			{
				key = key_array[r][c];				
     286:	e1 2f       	mov	r30, r17
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	ee 0f       	add	r30, r30
     28c:	ff 1f       	adc	r31, r31
     28e:	ee 0f       	add	r30, r30
     290:	ff 1f       	adc	r31, r31
     292:	e4 59       	subi	r30, 0x94	; 148
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	ed 0f       	add	r30, r29
     298:	f1 1d       	adc	r31, r1
     29a:	f0 80       	ld	r15, Z
				while(!DIO_Readpin(FIRST_INP_Pin + c));		// keep same signal as you still pressing the button
     29c:	8c 2f       	mov	r24, r28
     29e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_Readpin>
     2a2:	88 23       	and	r24, r24
     2a4:	d9 f3       	breq	.-10     	; 0x29c <keypad_Data+0x6a>
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
	
	for(r = 0; r < ROW; r++)
	{
		DIO_Writepin(FIRST_OUT_Pin + r  , LOW);		// set one output pin to Low
		for(c = 0; c < COLUMN; c++)
     2a6:	df 5f       	subi	r29, 0xFF	; 255
     2a8:	d4 30       	cpi	r29, 0x04	; 4
     2aa:	30 f3       	brcs	.-52     	; 0x278 <keypad_Data+0x46>
			{
				key = key_array[r][c];				
				while(!DIO_Readpin(FIRST_INP_Pin + c));		// keep same signal as you still pressing the button
			}
		}
		DIO_Writepin(FIRST_OUT_Pin + r  , HIGH);	// reset one output pin to High again
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	80 2f       	mov	r24, r16
     2b0:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 1  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 2  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
	
	for(r = 0; r < ROW; r++)
     2b4:	1f 5f       	subi	r17, 0xFF	; 255
     2b6:	14 30       	cpi	r17, 0x04	; 4
     2b8:	b8 f2       	brcs	.-82     	; 0x268 <keypad_Data+0x36>
			}
		}
		DIO_Writepin(FIRST_OUT_Pin + r  , HIGH);	// reset one output pin to High again
	}
	return key;
}
     2ba:	8f 2d       	mov	r24, r15
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	08 95       	ret

000002c8 <LCD_WriteCmd>:
		LCD_WriteData('-');
	}
	LCD_WriteData(Number%1000/100+'0');
	LCD_WriteData(Number%100/10+'0');
	LCD_WriteData(Number%10/1+'0');
}
     2c8:	cf 93       	push	r28
     2ca:	c8 2f       	mov	r28, r24
     2cc:	84 fb       	bst	r24, 4
     2ce:	66 27       	eor	r22, r22
     2d0:	60 f9       	bld	r22, 0
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     2d8:	c5 fb       	bst	r28, 5
     2da:	66 27       	eor	r22, r22
     2dc:	60 f9       	bld	r22, 0
     2de:	85 e0       	ldi	r24, 0x05	; 5
     2e0:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     2e4:	c6 fb       	bst	r28, 6
     2e6:	66 27       	eor	r22, r22
     2e8:	60 f9       	bld	r22, 0
     2ea:	86 e0       	ldi	r24, 0x06	; 6
     2ec:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     2f0:	6c 2f       	mov	r22, r28
     2f2:	66 1f       	adc	r22, r22
     2f4:	66 27       	eor	r22, r22
     2f6:	66 1f       	adc	r22, r22
     2f8:	87 e0       	ldi	r24, 0x07	; 7
     2fa:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	88 e0       	ldi	r24, 0x08	; 8
     302:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	89 e0       	ldi	r24, 0x09	; 9
     30a:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	8b e0       	ldi	r24, 0x0B	; 11
     312:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     316:	8f ec       	ldi	r24, 0xCF	; 207
     318:	97 e0       	ldi	r25, 0x07	; 7
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_WriteCmd+0x52>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_WriteCmd+0x58>
     320:	00 00       	nop
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	8b e0       	ldi	r24, 0x0B	; 11
     326:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     32a:	6c 2f       	mov	r22, r28
     32c:	61 70       	andi	r22, 0x01	; 1
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     334:	c1 fb       	bst	r28, 1
     336:	66 27       	eor	r22, r22
     338:	60 f9       	bld	r22, 0
     33a:	85 e0       	ldi	r24, 0x05	; 5
     33c:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     340:	c2 fb       	bst	r28, 2
     342:	66 27       	eor	r22, r22
     344:	60 f9       	bld	r22, 0
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     34c:	c3 fb       	bst	r28, 3
     34e:	66 27       	eor	r22, r22
     350:	60 f9       	bld	r22, 0
     352:	87 e0       	ldi	r24, 0x07	; 7
     354:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	88 e0       	ldi	r24, 0x08	; 8
     35c:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	89 e0       	ldi	r24, 0x09	; 9
     364:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	8b e0       	ldi	r24, 0x0B	; 11
     36c:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     370:	8f ec       	ldi	r24, 0xCF	; 207
     372:	97 e0       	ldi	r25, 0x07	; 7
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <LCD_WriteCmd+0xac>
     378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_WriteCmd+0xb2>
     37a:	00 00       	nop
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	8b e0       	ldi	r24, 0x0B	; 11
     380:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     384:	8f e0       	ldi	r24, 0x0F	; 15
     386:	97 e2       	ldi	r25, 0x27	; 39
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_WriteCmd+0xc0>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_WriteCmd+0xc6>
     38e:	00 00       	nop
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <LCD_Init>:
     394:	8f e3       	ldi	r24, 0x3F	; 63
     396:	9c e9       	ldi	r25, 0x9C	; 156
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_Init+0x4>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_Init+0xa>
     39e:	00 00       	nop
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_WriteCmd>
     3a6:	8f ec       	ldi	r24, 0xCF	; 207
     3a8:	97 e0       	ldi	r25, 0x07	; 7
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <LCD_Init+0x16>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCD_Init+0x1c>
     3b0:	00 00       	nop
     3b2:	88 e2       	ldi	r24, 0x28	; 40
     3b4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_WriteCmd>
     3b8:	8f ec       	ldi	r24, 0xCF	; 207
     3ba:	97 e0       	ldi	r25, 0x07	; 7
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_Init+0x28>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_Init+0x2e>
     3c2:	00 00       	nop
     3c4:	8c e0       	ldi	r24, 0x0C	; 12
     3c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_WriteCmd>
     3ca:	8f ec       	ldi	r24, 0xCF	; 207
     3cc:	97 e0       	ldi	r25, 0x07	; 7
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_Init+0x3a>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_Init+0x40>
     3d4:	00 00       	nop
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_WriteCmd>
     3dc:	8f e9       	ldi	r24, 0x9F	; 159
     3de:	9f e0       	ldi	r25, 0x0F	; 15
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_Init+0x4c>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_Init+0x52>
     3e6:	00 00       	nop
     3e8:	86 e0       	ldi	r24, 0x06	; 6
     3ea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_WriteCmd>
     3ee:	8f ec       	ldi	r24, 0xCF	; 207
     3f0:	97 e0       	ldi	r25, 0x07	; 7
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_Init+0x5e>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_Init+0x64>
     3f8:	00 00       	nop
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_WriteCmd>
     400:	08 95       	ret

00000402 <LCD_WriteData>:
     402:	cf 93       	push	r28
     404:	c8 2f       	mov	r28, r24
     406:	84 fb       	bst	r24, 4
     408:	66 27       	eor	r22, r22
     40a:	60 f9       	bld	r22, 0
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     412:	c5 fb       	bst	r28, 5
     414:	66 27       	eor	r22, r22
     416:	60 f9       	bld	r22, 0
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     41e:	c6 fb       	bst	r28, 6
     420:	66 27       	eor	r22, r22
     422:	60 f9       	bld	r22, 0
     424:	86 e0       	ldi	r24, 0x06	; 6
     426:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     42a:	6c 2f       	mov	r22, r28
     42c:	66 1f       	adc	r22, r22
     42e:	66 27       	eor	r22, r22
     430:	66 1f       	adc	r22, r22
     432:	87 e0       	ldi	r24, 0x07	; 7
     434:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	89 e0       	ldi	r24, 0x09	; 9
     444:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	8b e0       	ldi	r24, 0x0B	; 11
     44c:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     450:	8f ec       	ldi	r24, 0xCF	; 207
     452:	97 e0       	ldi	r25, 0x07	; 7
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	f1 f7       	brne	.-4      	; 0x454 <LCD_WriteData+0x52>
     458:	00 c0       	rjmp	.+0      	; 0x45a <LCD_WriteData+0x58>
     45a:	00 00       	nop
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	8b e0       	ldi	r24, 0x0B	; 11
     460:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     464:	6c 2f       	mov	r22, r28
     466:	61 70       	andi	r22, 0x01	; 1
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     46e:	c1 fb       	bst	r28, 1
     470:	66 27       	eor	r22, r22
     472:	60 f9       	bld	r22, 0
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     47a:	c2 fb       	bst	r28, 2
     47c:	66 27       	eor	r22, r22
     47e:	60 f9       	bld	r22, 0
     480:	86 e0       	ldi	r24, 0x06	; 6
     482:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     486:	c3 fb       	bst	r28, 3
     488:	66 27       	eor	r22, r22
     48a:	60 f9       	bld	r22, 0
     48c:	87 e0       	ldi	r24, 0x07	; 7
     48e:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	89 e0       	ldi	r24, 0x09	; 9
     49e:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	8b e0       	ldi	r24, 0x0B	; 11
     4a6:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     4aa:	8f ec       	ldi	r24, 0xCF	; 207
     4ac:	97 e0       	ldi	r25, 0x07	; 7
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCD_WriteData+0xac>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCD_WriteData+0xb2>
     4b4:	00 00       	nop
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	8b e0       	ldi	r24, 0x0B	; 11
     4ba:	0e 94 ce 03 	call	0x79c	; 0x79c <DIO_Writepin>
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <LCD_GOTO>:
     4c2:	88 23       	and	r24, r24
     4c4:	29 f0       	breq	.+10     	; 0x4d0 <LCD_GOTO+0xe>
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	31 f0       	breq	.+12     	; 0x4d6 <LCD_GOTO+0x14>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <LCD_GOTO+0x18>
     4d0:	80 e8       	ldi	r24, 0x80	; 128
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <LCD_GOTO+0x18>
     4d6:	80 ec       	ldi	r24, 0xC0	; 192
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	60 31       	cpi	r22, 0x10	; 16
     4dc:	10 f4       	brcc	.+4      	; 0x4e2 <LCD_GOTO+0x20>
     4de:	86 0f       	add	r24, r22
     4e0:	91 1d       	adc	r25, r1
     4e2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_WriteCmd>
     4e6:	08 95       	ret

000004e8 <LCD_WriteChar>:
     4e8:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteData>
     4ec:	8f ec       	ldi	r24, 0xCF	; 207
     4ee:	97 e0       	ldi	r25, 0x07	; 7
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCD_WriteChar+0x8>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <LCD_WriteChar+0xe>
     4f6:	00 00       	nop
     4f8:	08 95       	ret

000004fa <LCD_WriteString>:
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	8c 01       	movw	r16, r24
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	09 c0       	rjmp	.+18     	; 0x518 <LCD_WriteString+0x1e>
     506:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteData>
     50a:	8f ec       	ldi	r24, 0xCF	; 207
     50c:	97 e0       	ldi	r25, 0x07	; 7
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <LCD_WriteString+0x14>
     512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_WriteString+0x1a>
     514:	00 00       	nop
     516:	cf 5f       	subi	r28, 0xFF	; 255
     518:	f8 01       	movw	r30, r16
     51a:	ec 0f       	add	r30, r28
     51c:	f1 1d       	adc	r31, r1
     51e:	80 81       	ld	r24, Z
     520:	81 11       	cpse	r24, r1
     522:	f1 cf       	rjmp	.-30     	; 0x506 <LCD_WriteString+0xc>
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <LCD_WriteNumber2D>:

/*----------------  Function used to Write Number of 2 digits  --------------------*/

void LCD_WriteNumber2D(int8_t Number)
{
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	d8 2f       	mov	r29, r24
	if (Number<0)
     534:	88 23       	and	r24, r24
     536:	24 f4       	brge	.+8      	; 0x540 <LCD_WriteNumber2D+0x14>
	{
		Number=Number*-1;
     538:	d1 95       	neg	r29
		LCD_WriteData('-');
     53a:	8d e2       	ldi	r24, 0x2D	; 45
     53c:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteData>
	}
	LCD_WriteData(Number%100/10+'0');
     540:	89 e2       	ldi	r24, 0x29	; 41
     542:	d8 02       	muls	r29, r24
     544:	81 2d       	mov	r24, r1
     546:	11 24       	eor	r1, r1
     548:	85 95       	asr	r24
     54a:	85 95       	asr	r24
     54c:	85 95       	asr	r24
     54e:	85 95       	asr	r24
     550:	1d 2f       	mov	r17, r29
     552:	11 0f       	add	r17, r17
     554:	11 0b       	sbc	r17, r17
     556:	81 1b       	sub	r24, r17
     558:	9d 2f       	mov	r25, r29
     55a:	24 e6       	ldi	r18, 0x64	; 100
     55c:	82 9f       	mul	r24, r18
     55e:	90 19       	sub	r25, r0
     560:	11 24       	eor	r1, r1
     562:	c7 e6       	ldi	r28, 0x67	; 103
     564:	9c 02       	muls	r25, r28
     566:	81 2d       	mov	r24, r1
     568:	11 24       	eor	r1, r1
     56a:	85 95       	asr	r24
     56c:	85 95       	asr	r24
     56e:	97 fd       	sbrc	r25, 7
     570:	83 95       	inc	r24
     572:	80 5d       	subi	r24, 0xD0	; 208
     574:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteData>
	LCD_WriteData(Number%10/1+'0');
     578:	dc 02       	muls	r29, r28
     57a:	c1 2d       	mov	r28, r1
     57c:	11 24       	eor	r1, r1
     57e:	c5 95       	asr	r28
     580:	c5 95       	asr	r28
     582:	c1 1b       	sub	r28, r17
     584:	cc 0f       	add	r28, r28
     586:	8c 2f       	mov	r24, r28
     588:	88 0f       	add	r24, r24
     58a:	88 0f       	add	r24, r24
     58c:	c8 0f       	add	r28, r24
     58e:	8d 2f       	mov	r24, r29
     590:	8c 1b       	sub	r24, r28
     592:	80 5d       	subi	r24, 0xD0	; 208
     594:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteData>
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	08 95       	ret

000005a0 <main>:
		
			/*-------------------------- The Main Function ----------------------------*/
			
int main(void)
{
	StopWatch_Call();
     5a0:	0e 94 c6 00 	call	0x18c	; 0x18c <StopWatch_Call>
}
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	08 95       	ret

000005aa <DIO_Initpin>:
		{
			DIO_Initpin(i,status);
		}
		break;
	}
}
     5aa:	98 2f       	mov	r25, r24
     5ac:	96 95       	lsr	r25
     5ae:	96 95       	lsr	r25
     5b0:	96 95       	lsr	r25
     5b2:	87 70       	andi	r24, 0x07	; 7
     5b4:	61 30       	cpi	r22, 0x01	; 1
     5b6:	31 f0       	breq	.+12     	; 0x5c4 <DIO_Initpin+0x1a>
     5b8:	08 f4       	brcc	.+2      	; 0x5bc <DIO_Initpin+0x12>
     5ba:	54 c0       	rjmp	.+168    	; 0x664 <DIO_Initpin+0xba>
     5bc:	62 30       	cpi	r22, 0x02	; 2
     5be:	09 f4       	brne	.+2      	; 0x5c2 <DIO_Initpin+0x18>
     5c0:	a1 c0       	rjmp	.+322    	; 0x704 <DIO_Initpin+0x15a>
     5c2:	08 95       	ret
     5c4:	91 30       	cpi	r25, 0x01	; 1
     5c6:	c1 f0       	breq	.+48     	; 0x5f8 <DIO_Initpin+0x4e>
     5c8:	28 f0       	brcs	.+10     	; 0x5d4 <DIO_Initpin+0x2a>
     5ca:	92 30       	cpi	r25, 0x02	; 2
     5cc:	39 f1       	breq	.+78     	; 0x61c <DIO_Initpin+0x72>
     5ce:	93 30       	cpi	r25, 0x03	; 3
     5d0:	b9 f1       	breq	.+110    	; 0x640 <DIO_Initpin+0x96>
     5d2:	08 95       	ret
     5d4:	4a b3       	in	r20, 0x1a	; 26
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	b9 01       	movw	r22, r18
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_Initpin+0x38>
     5de:	66 0f       	add	r22, r22
     5e0:	77 1f       	adc	r23, r23
     5e2:	8a 95       	dec	r24
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_Initpin+0x34>
     5e6:	cb 01       	movw	r24, r22
     5e8:	96 2f       	mov	r25, r22
     5ea:	90 95       	com	r25
     5ec:	94 23       	and	r25, r20
     5ee:	9a bb       	out	0x1a, r25	; 26
     5f0:	9b b3       	in	r25, 0x1b	; 27
     5f2:	89 2b       	or	r24, r25
     5f4:	8b bb       	out	0x1b, r24	; 27
     5f6:	08 95       	ret
     5f8:	47 b3       	in	r20, 0x17	; 23
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	b9 01       	movw	r22, r18
     600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_Initpin+0x5c>
     602:	66 0f       	add	r22, r22
     604:	77 1f       	adc	r23, r23
     606:	8a 95       	dec	r24
     608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_Initpin+0x58>
     60a:	cb 01       	movw	r24, r22
     60c:	96 2f       	mov	r25, r22
     60e:	90 95       	com	r25
     610:	94 23       	and	r25, r20
     612:	97 bb       	out	0x17, r25	; 23
     614:	98 b3       	in	r25, 0x18	; 24
     616:	89 2b       	or	r24, r25
     618:	88 bb       	out	0x18, r24	; 24
     61a:	08 95       	ret
     61c:	44 b3       	in	r20, 0x14	; 20
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	b9 01       	movw	r22, r18
     624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_Initpin+0x80>
     626:	66 0f       	add	r22, r22
     628:	77 1f       	adc	r23, r23
     62a:	8a 95       	dec	r24
     62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_Initpin+0x7c>
     62e:	cb 01       	movw	r24, r22
     630:	96 2f       	mov	r25, r22
     632:	90 95       	com	r25
     634:	94 23       	and	r25, r20
     636:	94 bb       	out	0x14, r25	; 20
     638:	95 b3       	in	r25, 0x15	; 21
     63a:	89 2b       	or	r24, r25
     63c:	85 bb       	out	0x15, r24	; 21
     63e:	08 95       	ret
     640:	41 b3       	in	r20, 0x11	; 17
     642:	21 e0       	ldi	r18, 0x01	; 1
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	b9 01       	movw	r22, r18
     648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_Initpin+0xa4>
     64a:	66 0f       	add	r22, r22
     64c:	77 1f       	adc	r23, r23
     64e:	8a 95       	dec	r24
     650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_Initpin+0xa0>
     652:	cb 01       	movw	r24, r22
     654:	96 2f       	mov	r25, r22
     656:	90 95       	com	r25
     658:	94 23       	and	r25, r20
     65a:	91 bb       	out	0x11, r25	; 17
     65c:	92 b3       	in	r25, 0x12	; 18
     65e:	89 2b       	or	r24, r25
     660:	82 bb       	out	0x12, r24	; 18
     662:	08 95       	ret
     664:	91 30       	cpi	r25, 0x01	; 1
     666:	c1 f0       	breq	.+48     	; 0x698 <DIO_Initpin+0xee>
     668:	28 f0       	brcs	.+10     	; 0x674 <DIO_Initpin+0xca>
     66a:	92 30       	cpi	r25, 0x02	; 2
     66c:	39 f1       	breq	.+78     	; 0x6bc <DIO_Initpin+0x112>
     66e:	93 30       	cpi	r25, 0x03	; 3
     670:	b9 f1       	breq	.+110    	; 0x6e0 <DIO_Initpin+0x136>
     672:	08 95       	ret
     674:	4a b3       	in	r20, 0x1a	; 26
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	b9 01       	movw	r22, r18
     67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_Initpin+0xd8>
     67e:	66 0f       	add	r22, r22
     680:	77 1f       	adc	r23, r23
     682:	8a 95       	dec	r24
     684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_Initpin+0xd4>
     686:	cb 01       	movw	r24, r22
     688:	80 95       	com	r24
     68a:	94 2f       	mov	r25, r20
     68c:	98 23       	and	r25, r24
     68e:	9a bb       	out	0x1a, r25	; 26
     690:	9b b3       	in	r25, 0x1b	; 27
     692:	89 23       	and	r24, r25
     694:	8b bb       	out	0x1b, r24	; 27
     696:	08 95       	ret
     698:	47 b3       	in	r20, 0x17	; 23
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	b9 01       	movw	r22, r18
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_Initpin+0xfc>
     6a2:	66 0f       	add	r22, r22
     6a4:	77 1f       	adc	r23, r23
     6a6:	8a 95       	dec	r24
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_Initpin+0xf8>
     6aa:	cb 01       	movw	r24, r22
     6ac:	80 95       	com	r24
     6ae:	94 2f       	mov	r25, r20
     6b0:	98 23       	and	r25, r24
     6b2:	97 bb       	out	0x17, r25	; 23
     6b4:	98 b3       	in	r25, 0x18	; 24
     6b6:	89 23       	and	r24, r25
     6b8:	88 bb       	out	0x18, r24	; 24
     6ba:	08 95       	ret
     6bc:	44 b3       	in	r20, 0x14	; 20
     6be:	21 e0       	ldi	r18, 0x01	; 1
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	b9 01       	movw	r22, r18
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_Initpin+0x120>
     6c6:	66 0f       	add	r22, r22
     6c8:	77 1f       	adc	r23, r23
     6ca:	8a 95       	dec	r24
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_Initpin+0x11c>
     6ce:	cb 01       	movw	r24, r22
     6d0:	80 95       	com	r24
     6d2:	94 2f       	mov	r25, r20
     6d4:	98 23       	and	r25, r24
     6d6:	94 bb       	out	0x14, r25	; 20
     6d8:	95 b3       	in	r25, 0x15	; 21
     6da:	89 23       	and	r24, r25
     6dc:	85 bb       	out	0x15, r24	; 21
     6de:	08 95       	ret
     6e0:	41 b3       	in	r20, 0x11	; 17
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	b9 01       	movw	r22, r18
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_Initpin+0x144>
     6ea:	66 0f       	add	r22, r22
     6ec:	77 1f       	adc	r23, r23
     6ee:	8a 95       	dec	r24
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_Initpin+0x140>
     6f2:	cb 01       	movw	r24, r22
     6f4:	80 95       	com	r24
     6f6:	94 2f       	mov	r25, r20
     6f8:	98 23       	and	r25, r24
     6fa:	91 bb       	out	0x11, r25	; 17
     6fc:	92 b3       	in	r25, 0x12	; 18
     6fe:	89 23       	and	r24, r25
     700:	82 bb       	out	0x12, r24	; 18
     702:	08 95       	ret
     704:	91 30       	cpi	r25, 0x01	; 1
     706:	99 f0       	breq	.+38     	; 0x72e <DIO_Initpin+0x184>
     708:	28 f0       	brcs	.+10     	; 0x714 <DIO_Initpin+0x16a>
     70a:	92 30       	cpi	r25, 0x02	; 2
     70c:	e9 f0       	breq	.+58     	; 0x748 <DIO_Initpin+0x19e>
     70e:	93 30       	cpi	r25, 0x03	; 3
     710:	41 f1       	breq	.+80     	; 0x762 <DIO_Initpin+0x1b8>
     712:	08 95       	ret
     714:	4a b3       	in	r20, 0x1a	; 26
     716:	21 e0       	ldi	r18, 0x01	; 1
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	b9 01       	movw	r22, r18
     71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_Initpin+0x178>
     71e:	66 0f       	add	r22, r22
     720:	77 1f       	adc	r23, r23
     722:	8a 95       	dec	r24
     724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_Initpin+0x174>
     726:	cb 01       	movw	r24, r22
     728:	84 2b       	or	r24, r20
     72a:	8a bb       	out	0x1a, r24	; 26
     72c:	08 95       	ret
     72e:	47 b3       	in	r20, 0x17	; 23
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	b9 01       	movw	r22, r18
     736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_Initpin+0x192>
     738:	66 0f       	add	r22, r22
     73a:	77 1f       	adc	r23, r23
     73c:	8a 95       	dec	r24
     73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_Initpin+0x18e>
     740:	cb 01       	movw	r24, r22
     742:	84 2b       	or	r24, r20
     744:	87 bb       	out	0x17, r24	; 23
     746:	08 95       	ret
     748:	44 b3       	in	r20, 0x14	; 20
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	b9 01       	movw	r22, r18
     750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_Initpin+0x1ac>
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	8a 95       	dec	r24
     758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_Initpin+0x1a8>
     75a:	cb 01       	movw	r24, r22
     75c:	84 2b       	or	r24, r20
     75e:	84 bb       	out	0x14, r24	; 20
     760:	08 95       	ret
     762:	41 b3       	in	r20, 0x11	; 17
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	b9 01       	movw	r22, r18
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_Initpin+0x1c6>
     76c:	66 0f       	add	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	8a 95       	dec	r24
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_Initpin+0x1c2>
     774:	cb 01       	movw	r24, r22
     776:	84 2b       	or	r24, r20
     778:	81 bb       	out	0x11, r24	; 17
     77a:	08 95       	ret

0000077c <Init_Pins>:
     77c:	cf 93       	push	r28
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	09 c0       	rjmp	.+18     	; 0x794 <Init_Pins+0x18>
     782:	ec 2f       	mov	r30, r28
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	e4 58       	subi	r30, 0x84	; 132
     788:	ff 4f       	sbci	r31, 0xFF	; 255
     78a:	60 81       	ld	r22, Z
     78c:	8c 2f       	mov	r24, r28
     78e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Initpin>
     792:	cf 5f       	subi	r28, 0xFF	; 255
     794:	c0 32       	cpi	r28, 0x20	; 32
     796:	a8 f3       	brcs	.-22     	; 0x782 <Init_Pins+0x6>
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
     79c:	98 2f       	mov	r25, r24
     79e:	96 95       	lsr	r25
     7a0:	96 95       	lsr	r25
     7a2:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
     7a4:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
     7a6:	61 30       	cpi	r22, 0x01	; 1
     7a8:	e1 f5       	brne	.+120    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		
		switch(port){
     7aa:	91 30       	cpi	r25, 0x01	; 1
     7ac:	99 f0       	breq	.+38     	; 0x7d4 <DIO_Writepin+0x38>
     7ae:	28 f0       	brcs	.+10     	; 0x7ba <DIO_Writepin+0x1e>
     7b0:	92 30       	cpi	r25, 0x02	; 2
     7b2:	e9 f0       	breq	.+58     	; 0x7ee <DIO_Writepin+0x52>
     7b4:	93 30       	cpi	r25, 0x03	; 3
     7b6:	41 f1       	breq	.+80     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7b8:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
     7ba:	4b b3       	in	r20, 0x1b	; 27
     7bc:	21 e0       	ldi	r18, 0x01	; 1
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	b9 01       	movw	r22, r18
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_Writepin+0x2c>
     7c4:	66 0f       	add	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	8a 95       	dec	r24
     7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_Writepin+0x28>
     7cc:	cb 01       	movw	r24, r22
     7ce:	84 2b       	or	r24, r20
     7d0:	8b bb       	out	0x1b, r24	; 27
			break;
     7d2:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     7d4:	48 b3       	in	r20, 0x18	; 24
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	b9 01       	movw	r22, r18
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_Writepin+0x46>
     7de:	66 0f       	add	r22, r22
     7e0:	77 1f       	adc	r23, r23
     7e2:	8a 95       	dec	r24
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_Writepin+0x42>
     7e6:	cb 01       	movw	r24, r22
     7e8:	84 2b       	or	r24, r20
     7ea:	88 bb       	out	0x18, r24	; 24
			break;
     7ec:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     7ee:	45 b3       	in	r20, 0x15	; 21
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	b9 01       	movw	r22, r18
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_Writepin+0x60>
     7f8:	66 0f       	add	r22, r22
     7fa:	77 1f       	adc	r23, r23
     7fc:	8a 95       	dec	r24
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_Writepin+0x5c>
     800:	cb 01       	movw	r24, r22
     802:	84 2b       	or	r24, r20
     804:	85 bb       	out	0x15, r24	; 21
			break;
     806:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     808:	42 b3       	in	r20, 0x12	; 18
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	b9 01       	movw	r22, r18
     810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     812:	66 0f       	add	r22, r22
     814:	77 1f       	adc	r23, r23
     816:	8a 95       	dec	r24
     818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     81a:	cb 01       	movw	r24, r22
     81c:	84 2b       	or	r24, r20
     81e:	82 bb       	out	0x12, r24	; 18
			break;
     820:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
     822:	61 11       	cpse	r22, r1
     824:	3f c0       	rjmp	.+126    	; 0x8a4 <__stack+0x45>
		switch(port){
     826:	91 30       	cpi	r25, 0x01	; 1
     828:	a1 f0       	breq	.+40     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     82a:	28 f0       	brcs	.+10     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     82c:	92 30       	cpi	r25, 0x02	; 2
     82e:	f9 f0       	breq	.+62     	; 0x86e <__stack+0xf>
     830:	93 30       	cpi	r25, 0x03	; 3
     832:	59 f1       	breq	.+86     	; 0x88a <__stack+0x2b>
     834:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
     836:	4b b3       	in	r20, 0x1b	; 27
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	b9 01       	movw	r22, r18
     83e:	02 c0       	rjmp	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     840:	66 0f       	add	r22, r22
     842:	77 1f       	adc	r23, r23
     844:	8a 95       	dec	r24
     846:	e2 f7       	brpl	.-8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     848:	cb 01       	movw	r24, r22
     84a:	80 95       	com	r24
     84c:	84 23       	and	r24, r20
     84e:	8b bb       	out	0x1b, r24	; 27
			break;
     850:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
     852:	48 b3       	in	r20, 0x18	; 24
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	b9 01       	movw	r22, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	66 0f       	add	r22, r22
     85e:	77 1f       	adc	r23, r23
     860:	8a 95       	dec	r24
     862:	e2 f7       	brpl	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     864:	cb 01       	movw	r24, r22
     866:	80 95       	com	r24
     868:	84 23       	and	r24, r20
     86a:	88 bb       	out	0x18, r24	; 24
			break;
     86c:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
     86e:	45 b3       	in	r20, 0x15	; 21
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	b9 01       	movw	r22, r18
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
     878:	66 0f       	add	r22, r22
     87a:	77 1f       	adc	r23, r23
     87c:	8a 95       	dec	r24
     87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
     880:	cb 01       	movw	r24, r22
     882:	80 95       	com	r24
     884:	84 23       	and	r24, r20
     886:	85 bb       	out	0x15, r24	; 21
			break;
     888:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
     88a:	42 b3       	in	r20, 0x12	; 18
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	b9 01       	movw	r22, r18
     892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
     894:	66 0f       	add	r22, r22
     896:	77 1f       	adc	r23, r23
     898:	8a 95       	dec	r24
     89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
     89c:	cb 01       	movw	r24, r22
     89e:	80 95       	com	r24
     8a0:	84 23       	and	r24, r20
     8a2:	82 bb       	out	0x12, r24	; 18
     8a4:	08 95       	ret

000008a6 <DIO_Readpin>:

/*--------------------------- Function used to read pin value ----------------------------------*/

DIO_PIN_voltagetype DIO_Readpin(DIO_PIN_type pin){
	uint8_t res=0;
	DIO_Port_type port=pin/8;
     8a6:	98 2f       	mov	r25, r24
     8a8:	96 95       	lsr	r25
     8aa:	96 95       	lsr	r25
     8ac:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
     8ae:	48 2f       	mov	r20, r24
     8b0:	47 70       	andi	r20, 0x07	; 7
	switch(port){
     8b2:	91 30       	cpi	r25, 0x01	; 1
     8b4:	81 f0       	breq	.+32     	; 0x8d6 <DIO_Readpin+0x30>
     8b6:	28 f0       	brcs	.+10     	; 0x8c2 <DIO_Readpin+0x1c>
     8b8:	92 30       	cpi	r25, 0x02	; 2
     8ba:	b9 f0       	breq	.+46     	; 0x8ea <DIO_Readpin+0x44>
     8bc:	93 30       	cpi	r25, 0x03	; 3
     8be:	f9 f0       	breq	.+62     	; 0x8fe <DIO_Readpin+0x58>
     8c0:	28 c0       	rjmp	.+80     	; 0x912 <DIO_Readpin+0x6c>
		case PA:
		res= READ_BIT(PINA,pin_num);
     8c2:	99 b3       	in	r25, 0x19	; 25
     8c4:	89 2f       	mov	r24, r25
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <DIO_Readpin+0x28>
     8ca:	95 95       	asr	r25
     8cc:	87 95       	ror	r24
     8ce:	4a 95       	dec	r20
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <DIO_Readpin+0x24>
     8d2:	81 70       	andi	r24, 0x01	; 1
		break;
     8d4:	08 95       	ret
		case PB:
		res= READ_BIT(PINB,pin_num);
     8d6:	26 b3       	in	r18, 0x16	; 22
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	c9 01       	movw	r24, r18
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <DIO_Readpin+0x3c>
     8de:	95 95       	asr	r25
     8e0:	87 95       	ror	r24
     8e2:	4a 95       	dec	r20
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <DIO_Readpin+0x38>
     8e6:	81 70       	andi	r24, 0x01	; 1
		break;
     8e8:	08 95       	ret
		case PC:
		res=READ_BIT(PINC,pin_num);
     8ea:	23 b3       	in	r18, 0x13	; 19
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	c9 01       	movw	r24, r18
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <DIO_Readpin+0x50>
     8f2:	95 95       	asr	r25
     8f4:	87 95       	ror	r24
     8f6:	4a 95       	dec	r20
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <DIO_Readpin+0x4c>
     8fa:	81 70       	andi	r24, 0x01	; 1
		break;
     8fc:	08 95       	ret
		case PD:
		res=READ_BIT(PIND,pin_num);
     8fe:	20 b3       	in	r18, 0x10	; 16
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	c9 01       	movw	r24, r18
     904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_Readpin+0x64>
     906:	95 95       	asr	r25
     908:	87 95       	ror	r24
     90a:	4a 95       	dec	r20
     90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_Readpin+0x60>
     90e:	81 70       	andi	r24, 0x01	; 1
		break;
     910:	08 95       	ret
}

/*--------------------------- Function used to read pin value ----------------------------------*/

DIO_PIN_voltagetype DIO_Readpin(DIO_PIN_type pin){
	uint8_t res=0;
     912:	80 e0       	ldi	r24, 0x00	; 0
		case PD:
		res=READ_BIT(PIND,pin_num);
		break;
	}
	return res;
}
     914:	08 95       	ret

00000916 <EXI_TriggerEdge>:
		break;
		case EXI_1:
		CLEAR_BIT(GICR,INT1);
		break;
		case EXI_2:
		CLEAR_BIT(GICR,INT2);
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	49 f1       	breq	.+82     	; 0x96c <EXI_TriggerEdge+0x56>
     91a:	20 f0       	brcs	.+8      	; 0x924 <EXI_TriggerEdge+0xe>
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	09 f4       	brne	.+2      	; 0x922 <EXI_TriggerEdge+0xc>
     920:	49 c0       	rjmp	.+146    	; 0x9b4 <EXI_TriggerEdge+0x9e>
     922:	08 95       	ret
     924:	61 30       	cpi	r22, 0x01	; 1
     926:	69 f0       	breq	.+26     	; 0x942 <EXI_TriggerEdge+0x2c>
     928:	28 f0       	brcs	.+10     	; 0x934 <EXI_TriggerEdge+0x1e>
     92a:	62 30       	cpi	r22, 0x02	; 2
     92c:	89 f0       	breq	.+34     	; 0x950 <EXI_TriggerEdge+0x3a>
     92e:	63 30       	cpi	r22, 0x03	; 3
     930:	b1 f0       	breq	.+44     	; 0x95e <EXI_TriggerEdge+0x48>
     932:	08 95       	ret
     934:	85 b7       	in	r24, 0x35	; 53
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	85 bf       	out	0x35, r24	; 53
     93a:	85 b7       	in	r24, 0x35	; 53
     93c:	8d 7f       	andi	r24, 0xFD	; 253
     93e:	85 bf       	out	0x35, r24	; 53
     940:	08 95       	ret
     942:	85 b7       	in	r24, 0x35	; 53
     944:	81 60       	ori	r24, 0x01	; 1
     946:	85 bf       	out	0x35, r24	; 53
     948:	85 b7       	in	r24, 0x35	; 53
     94a:	8d 7f       	andi	r24, 0xFD	; 253
     94c:	85 bf       	out	0x35, r24	; 53
     94e:	08 95       	ret
     950:	85 b7       	in	r24, 0x35	; 53
     952:	8e 7f       	andi	r24, 0xFE	; 254
     954:	85 bf       	out	0x35, r24	; 53
     956:	85 b7       	in	r24, 0x35	; 53
     958:	82 60       	ori	r24, 0x02	; 2
     95a:	85 bf       	out	0x35, r24	; 53
     95c:	08 95       	ret
     95e:	85 b7       	in	r24, 0x35	; 53
     960:	81 60       	ori	r24, 0x01	; 1
     962:	85 bf       	out	0x35, r24	; 53
     964:	85 b7       	in	r24, 0x35	; 53
     966:	82 60       	ori	r24, 0x02	; 2
     968:	85 bf       	out	0x35, r24	; 53
     96a:	08 95       	ret
     96c:	61 30       	cpi	r22, 0x01	; 1
     96e:	69 f0       	breq	.+26     	; 0x98a <EXI_TriggerEdge+0x74>
     970:	28 f0       	brcs	.+10     	; 0x97c <EXI_TriggerEdge+0x66>
     972:	62 30       	cpi	r22, 0x02	; 2
     974:	89 f0       	breq	.+34     	; 0x998 <EXI_TriggerEdge+0x82>
     976:	63 30       	cpi	r22, 0x03	; 3
     978:	b1 f0       	breq	.+44     	; 0x9a6 <EXI_TriggerEdge+0x90>
     97a:	08 95       	ret
     97c:	85 b7       	in	r24, 0x35	; 53
     97e:	8b 7f       	andi	r24, 0xFB	; 251
     980:	85 bf       	out	0x35, r24	; 53
     982:	85 b7       	in	r24, 0x35	; 53
     984:	87 7f       	andi	r24, 0xF7	; 247
     986:	85 bf       	out	0x35, r24	; 53
     988:	08 95       	ret
     98a:	85 b7       	in	r24, 0x35	; 53
     98c:	84 60       	ori	r24, 0x04	; 4
     98e:	85 bf       	out	0x35, r24	; 53
     990:	85 b7       	in	r24, 0x35	; 53
     992:	87 7f       	andi	r24, 0xF7	; 247
     994:	85 bf       	out	0x35, r24	; 53
     996:	08 95       	ret
     998:	85 b7       	in	r24, 0x35	; 53
     99a:	8b 7f       	andi	r24, 0xFB	; 251
     99c:	85 bf       	out	0x35, r24	; 53
     99e:	85 b7       	in	r24, 0x35	; 53
     9a0:	88 60       	ori	r24, 0x08	; 8
     9a2:	85 bf       	out	0x35, r24	; 53
     9a4:	08 95       	ret
     9a6:	85 b7       	in	r24, 0x35	; 53
     9a8:	84 60       	ori	r24, 0x04	; 4
     9aa:	85 bf       	out	0x35, r24	; 53
     9ac:	85 b7       	in	r24, 0x35	; 53
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	85 bf       	out	0x35, r24	; 53
     9b2:	08 95       	ret
     9b4:	62 30       	cpi	r22, 0x02	; 2
     9b6:	19 f0       	breq	.+6      	; 0x9be <EXI_TriggerEdge+0xa8>
     9b8:	63 30       	cpi	r22, 0x03	; 3
     9ba:	29 f0       	breq	.+10     	; 0x9c6 <EXI_TriggerEdge+0xb0>
     9bc:	08 95       	ret
     9be:	84 b7       	in	r24, 0x34	; 52
     9c0:	8f 7b       	andi	r24, 0xBF	; 191
     9c2:	84 bf       	out	0x34, r24	; 52
     9c4:	08 95       	ret
     9c6:	84 b7       	in	r24, 0x34	; 52
     9c8:	80 64       	ori	r24, 0x40	; 64
     9ca:	84 bf       	out	0x34, r24	; 52
     9cc:	08 95       	ret

000009ce <EXI_Enable>:
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	41 f0       	breq	.+16     	; 0x9e2 <EXI_Enable+0x14>
     9d2:	18 f0       	brcs	.+6      	; 0x9da <EXI_Enable+0xc>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	49 f0       	breq	.+18     	; 0x9ea <EXI_Enable+0x1c>
     9d8:	08 95       	ret
     9da:	8b b7       	in	r24, 0x3b	; 59
     9dc:	80 64       	ori	r24, 0x40	; 64
     9de:	8b bf       	out	0x3b, r24	; 59
     9e0:	08 95       	ret
     9e2:	8b b7       	in	r24, 0x3b	; 59
     9e4:	80 68       	ori	r24, 0x80	; 128
     9e6:	8b bf       	out	0x3b, r24	; 59
     9e8:	08 95       	ret
     9ea:	8b b7       	in	r24, 0x3b	; 59
     9ec:	80 62       	ori	r24, 0x20	; 32
     9ee:	8b bf       	out	0x3b, r24	; 59
     9f0:	08 95       	ret

000009f2 <EXI_SetCallBack>:
	
}

void EXI_SetCallBack(Exteral_Interrput_Type interrupt,void (*F_local)(void)){
	
	switch(interrupt){
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	49 f0       	breq	.+18     	; 0xa08 <EXI_SetCallBack+0x16>
     9f6:	18 f0       	brcs	.+6      	; 0x9fe <EXI_SetCallBack+0xc>
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	59 f0       	breq	.+22     	; 0xa12 <EXI_SetCallBack+0x20>
     9fc:	08 95       	ret
		case EXI_0:
		Fptr_EXI0=F_local;
     9fe:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <Fptr_EXI0+0x1>
     a02:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <Fptr_EXI0>
		break;
     a06:	08 95       	ret
		case EXI_1:
		Fptr_EXI1=F_local;
     a08:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <Fptr_EXI1+0x1>
     a0c:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <Fptr_EXI1>
		break;
     a10:	08 95       	ret
		case EXI_2:
		Fptr_EXI2=F_local;
     a12:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <Fptr_EXI2+0x1>
     a16:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <Fptr_EXI2>
     a1a:	08 95       	ret

00000a1c <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	2f 93       	push	r18
     a28:	3f 93       	push	r19
     a2a:	4f 93       	push	r20
     a2c:	5f 93       	push	r21
     a2e:	6f 93       	push	r22
     a30:	7f 93       	push	r23
     a32:	8f 93       	push	r24
     a34:	9f 93       	push	r25
     a36:	af 93       	push	r26
     a38:	bf 93       	push	r27
     a3a:	ef 93       	push	r30
     a3c:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
     a3e:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Fptr_EXI0>
     a42:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Fptr_EXI0+0x1>
     a46:	30 97       	sbiw	r30, 0x00	; 0
     a48:	09 f0       	breq	.+2      	; 0xa4c <__vector_1+0x30>
		Fptr_EXI0();
     a4a:	09 95       	icall
	}
}
     a4c:	ff 91       	pop	r31
     a4e:	ef 91       	pop	r30
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <__vector_2>:

/*-------------  (ISR of EXI1) ----------------*/

ISR(INT1_vect){
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	0f 92       	push	r0
     a76:	11 24       	eor	r1, r1
     a78:	2f 93       	push	r18
     a7a:	3f 93       	push	r19
     a7c:	4f 93       	push	r20
     a7e:	5f 93       	push	r21
     a80:	6f 93       	push	r22
     a82:	7f 93       	push	r23
     a84:	8f 93       	push	r24
     a86:	9f 93       	push	r25
     a88:	af 93       	push	r26
     a8a:	bf 93       	push	r27
     a8c:	ef 93       	push	r30
     a8e:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
     a90:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Fptr_EXI1>
     a94:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Fptr_EXI1+0x1>
     a98:	30 97       	sbiw	r30, 0x00	; 0
     a9a:	09 f0       	breq	.+2      	; 0xa9e <__vector_2+0x30>
		Fptr_EXI1();
     a9c:	09 95       	icall
	}
}
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	bf 91       	pop	r27
     aa4:	af 91       	pop	r26
     aa6:	9f 91       	pop	r25
     aa8:	8f 91       	pop	r24
     aaa:	7f 91       	pop	r23
     aac:	6f 91       	pop	r22
     aae:	5f 91       	pop	r21
     ab0:	4f 91       	pop	r20
     ab2:	3f 91       	pop	r19
     ab4:	2f 91       	pop	r18
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <__vector_3>:

/*-------------  (ISR of EXI2) ----------------*/

ISR(INT2_vect){
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
	
	if(Fptr_EXI2!=NULL_ptr){
     ae2:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Fptr_EXI2>
     ae6:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Fptr_EXI2+0x1>
     aea:	30 97       	sbiw	r30, 0x00	; 0
     aec:	09 f0       	breq	.+2      	; 0xaf0 <__vector_3+0x30>
		Fptr_EXI2();
     aee:	09 95       	icall
	}
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <fun_oc0>:

/*------------------------- TIMER0_SetCallBack Function Definition -----------------------------*/

void TIMER0_OVF_SetCallBack(void (*ptr)(void))
{
	Timer0_OVF_Fptr=ptr;
     b12:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <C.1826>
     b16:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <C.1826+0x1>
     b1a:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <C.1826+0x2>
     b1e:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <C.1826+0x3>
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	a1 1d       	adc	r26, r1
     b26:	b1 1d       	adc	r27, r1
     b28:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <C.1826>
     b2c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <C.1826+0x1>
     b30:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <C.1826+0x2>
     b34:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <C.1826+0x3>
     b38:	40 91 a8 00 	lds	r20, 0x00A8	; 0x8000a8 <C_set>
     b3c:	50 91 a9 00 	lds	r21, 0x00A9	; 0x8000a9 <C_set+0x1>
     b40:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <C_set+0x2>
     b44:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <C_set+0x3>
     b48:	84 17       	cp	r24, r20
     b4a:	95 07       	cpc	r25, r21
     b4c:	a6 07       	cpc	r26, r22
     b4e:	b7 07       	cpc	r27, r23
     b50:	69 f4       	brne	.+26     	; 0xb6c <fun_oc0+0x5a>
     b52:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <pf_OC>
     b56:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <pf_OC+0x1>
     b5a:	09 95       	icall
     b5c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <C.1826>
     b60:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <C.1826+0x1>
     b64:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <C.1826+0x2>
     b68:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <C.1826+0x3>
     b6c:	08 95       	ret

00000b6e <TIMER0_Init>:
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	69 f0       	breq	.+26     	; 0xb8c <TIMER0_Init+0x1e>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <TIMER0_Init+0x10>
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	89 f0       	breq	.+34     	; 0xb9a <TIMER0_Init+0x2c>
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	b1 f0       	breq	.+44     	; 0xba8 <TIMER0_Init+0x3a>
     b7c:	1b c0       	rjmp	.+54     	; 0xbb4 <TIMER0_Init+0x46>
     b7e:	83 b7       	in	r24, 0x33	; 51
     b80:	8f 7b       	andi	r24, 0xBF	; 191
     b82:	83 bf       	out	0x33, r24	; 51
     b84:	83 b7       	in	r24, 0x33	; 51
     b86:	87 7f       	andi	r24, 0xF7	; 247
     b88:	83 bf       	out	0x33, r24	; 51
     b8a:	14 c0       	rjmp	.+40     	; 0xbb4 <TIMER0_Init+0x46>
     b8c:	83 b7       	in	r24, 0x33	; 51
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	83 bf       	out	0x33, r24	; 51
     b92:	83 b7       	in	r24, 0x33	; 51
     b94:	87 7f       	andi	r24, 0xF7	; 247
     b96:	83 bf       	out	0x33, r24	; 51
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <TIMER0_Init+0x46>
     b9a:	83 b7       	in	r24, 0x33	; 51
     b9c:	8f 7b       	andi	r24, 0xBF	; 191
     b9e:	83 bf       	out	0x33, r24	; 51
     ba0:	83 b7       	in	r24, 0x33	; 51
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	83 bf       	out	0x33, r24	; 51
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <TIMER0_Init+0x46>
     ba8:	83 b7       	in	r24, 0x33	; 51
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	83 bf       	out	0x33, r24	; 51
     bae:	83 b7       	in	r24, 0x33	; 51
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	83 bf       	out	0x33, r24	; 51
     bb4:	86 2f       	mov	r24, r22
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	88 30       	cpi	r24, 0x08	; 8
     bba:	91 05       	cpc	r25, r1
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <TIMER0_Init+0x52>
     bbe:	54 c0       	rjmp	.+168    	; 0xc68 <TIMER0_Init+0xfa>
     bc0:	fc 01       	movw	r30, r24
     bc2:	e6 5d       	subi	r30, 0xD6	; 214
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__tablejump2__>
     bca:	83 b7       	in	r24, 0x33	; 51
     bcc:	8e 7f       	andi	r24, 0xFE	; 254
     bce:	83 bf       	out	0x33, r24	; 51
     bd0:	83 b7       	in	r24, 0x33	; 51
     bd2:	8d 7f       	andi	r24, 0xFD	; 253
     bd4:	83 bf       	out	0x33, r24	; 51
     bd6:	83 b7       	in	r24, 0x33	; 51
     bd8:	8b 7f       	andi	r24, 0xFB	; 251
     bda:	83 bf       	out	0x33, r24	; 51
     bdc:	45 c0       	rjmp	.+138    	; 0xc68 <TIMER0_Init+0xfa>
     bde:	83 b7       	in	r24, 0x33	; 51
     be0:	81 60       	ori	r24, 0x01	; 1
     be2:	83 bf       	out	0x33, r24	; 51
     be4:	83 b7       	in	r24, 0x33	; 51
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	83 bf       	out	0x33, r24	; 51
     bea:	83 b7       	in	r24, 0x33	; 51
     bec:	8b 7f       	andi	r24, 0xFB	; 251
     bee:	83 bf       	out	0x33, r24	; 51
     bf0:	3b c0       	rjmp	.+118    	; 0xc68 <TIMER0_Init+0xfa>
     bf2:	83 b7       	in	r24, 0x33	; 51
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	83 bf       	out	0x33, r24	; 51
     bf8:	83 b7       	in	r24, 0x33	; 51
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	83 bf       	out	0x33, r24	; 51
     bfe:	83 b7       	in	r24, 0x33	; 51
     c00:	8b 7f       	andi	r24, 0xFB	; 251
     c02:	83 bf       	out	0x33, r24	; 51
     c04:	31 c0       	rjmp	.+98     	; 0xc68 <TIMER0_Init+0xfa>
     c06:	83 b7       	in	r24, 0x33	; 51
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	83 bf       	out	0x33, r24	; 51
     c0c:	83 b7       	in	r24, 0x33	; 51
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	83 bf       	out	0x33, r24	; 51
     c12:	83 b7       	in	r24, 0x33	; 51
     c14:	8b 7f       	andi	r24, 0xFB	; 251
     c16:	83 bf       	out	0x33, r24	; 51
     c18:	27 c0       	rjmp	.+78     	; 0xc68 <TIMER0_Init+0xfa>
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	8d 7f       	andi	r24, 0xFD	; 253
     c24:	83 bf       	out	0x33, r24	; 51
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	83 bf       	out	0x33, r24	; 51
     c2c:	1d c0       	rjmp	.+58     	; 0xc68 <TIMER0_Init+0xfa>
     c2e:	83 b7       	in	r24, 0x33	; 51
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	83 bf       	out	0x33, r24	; 51
     c34:	83 b7       	in	r24, 0x33	; 51
     c36:	8d 7f       	andi	r24, 0xFD	; 253
     c38:	83 bf       	out	0x33, r24	; 51
     c3a:	83 b7       	in	r24, 0x33	; 51
     c3c:	84 60       	ori	r24, 0x04	; 4
     c3e:	83 bf       	out	0x33, r24	; 51
     c40:	13 c0       	rjmp	.+38     	; 0xc68 <TIMER0_Init+0xfa>
     c42:	83 b7       	in	r24, 0x33	; 51
     c44:	8e 7f       	andi	r24, 0xFE	; 254
     c46:	83 bf       	out	0x33, r24	; 51
     c48:	83 b7       	in	r24, 0x33	; 51
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	83 bf       	out	0x33, r24	; 51
     c4e:	83 b7       	in	r24, 0x33	; 51
     c50:	84 60       	ori	r24, 0x04	; 4
     c52:	83 bf       	out	0x33, r24	; 51
     c54:	09 c0       	rjmp	.+18     	; 0xc68 <TIMER0_Init+0xfa>
     c56:	83 b7       	in	r24, 0x33	; 51
     c58:	81 60       	ori	r24, 0x01	; 1
     c5a:	83 bf       	out	0x33, r24	; 51
     c5c:	83 b7       	in	r24, 0x33	; 51
     c5e:	82 60       	ori	r24, 0x02	; 2
     c60:	83 bf       	out	0x33, r24	; 51
     c62:	83 b7       	in	r24, 0x33	; 51
     c64:	84 60       	ori	r24, 0x04	; 4
     c66:	83 bf       	out	0x33, r24	; 51
     c68:	41 30       	cpi	r20, 0x01	; 1
     c6a:	69 f0       	breq	.+26     	; 0xc86 <TIMER0_Init+0x118>
     c6c:	28 f0       	brcs	.+10     	; 0xc78 <TIMER0_Init+0x10a>
     c6e:	42 30       	cpi	r20, 0x02	; 2
     c70:	c1 f0       	breq	.+48     	; 0xca2 <TIMER0_Init+0x134>
     c72:	43 30       	cpi	r20, 0x03	; 3
     c74:	79 f0       	breq	.+30     	; 0xc94 <TIMER0_Init+0x126>
     c76:	08 95       	ret
     c78:	83 b7       	in	r24, 0x33	; 51
     c7a:	8f 7e       	andi	r24, 0xEF	; 239
     c7c:	83 bf       	out	0x33, r24	; 51
     c7e:	83 b7       	in	r24, 0x33	; 51
     c80:	8f 7d       	andi	r24, 0xDF	; 223
     c82:	83 bf       	out	0x33, r24	; 51
     c84:	08 95       	ret
     c86:	83 b7       	in	r24, 0x33	; 51
     c88:	80 61       	ori	r24, 0x10	; 16
     c8a:	83 bf       	out	0x33, r24	; 51
     c8c:	83 b7       	in	r24, 0x33	; 51
     c8e:	8f 7d       	andi	r24, 0xDF	; 223
     c90:	83 bf       	out	0x33, r24	; 51
     c92:	08 95       	ret
     c94:	83 b7       	in	r24, 0x33	; 51
     c96:	8f 7e       	andi	r24, 0xEF	; 239
     c98:	83 bf       	out	0x33, r24	; 51
     c9a:	83 b7       	in	r24, 0x33	; 51
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	83 bf       	out	0x33, r24	; 51
     ca0:	08 95       	ret
     ca2:	83 b7       	in	r24, 0x33	; 51
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	83 bf       	out	0x33, r24	; 51
     ca8:	83 b7       	in	r24, 0x33	; 51
     caa:	80 62       	ori	r24, 0x20	; 32
     cac:	83 bf       	out	0x33, r24	; 51
     cae:	08 95       	ret

00000cb0 <TIMER0_OCInterrupt_Enable>:
     cb0:	89 b7       	in	r24, 0x39	; 57
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	89 bf       	out	0x39, r24	; 57
     cb6:	08 95       	ret

00000cb8 <TIMER0_OC_SetCallBack>:
}

void TIMER0_OC_SetCallBack(void (*ptr)(void))
{
	Timer0_OC0_Fptr=ptr;
     cb8:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <Timer0_OC0_Fptr+0x1>
     cbc:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <Timer0_OC0_Fptr>
     cc0:	08 95       	ret

00000cc2 <TIMER0_SetInterrupt_ms>:
/*------------------------- Function Definition Of Timer 0 to call fun every n. of seconds -----------------------------*/

void TIMER0_SetInterrupt_ms(uint16_t time, void (*pf)(void))
{
	
	pf_OC=pf;
     cc2:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <pf_OC+0x1>
     cc6:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <pf_OC>
	C_set=(1000000*time)/200;
     cca:	dc 01       	movw	r26, r24
     ccc:	20 e4       	ldi	r18, 0x40	; 64
     cce:	32 e4       	ldi	r19, 0x42	; 66
     cd0:	4f e0       	ldi	r20, 0x0F	; 15
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__muluhisi3>
     cd8:	28 ec       	ldi	r18, 0xC8	; 200
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__divmodsi4>
     ce4:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <C_set>
     ce8:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <C_set+0x1>
     cec:	40 93 aa 00 	sts	0x00AA, r20	; 0x8000aa <C_set+0x2>
     cf0:	50 93 ab 00 	sts	0x00AB, r21	; 0x8000ab <C_set+0x3>
	OCR0=200;
     cf4:	88 ec       	ldi	r24, 0xC8	; 200
     cf6:	8c bf       	out	0x3c, r24	; 60
	TIMER0_OC_SetCallBack(fun_oc0);
     cf8:	89 e8       	ldi	r24, 0x89	; 137
     cfa:	95 e0       	ldi	r25, 0x05	; 5
     cfc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <TIMER0_OC_SetCallBack>
	TIMER0_OCInterrupt_Enable();
     d00:	0e 94 58 06 	call	0xcb0	; 0xcb0 <TIMER0_OCInterrupt_Enable>
     d04:	08 95       	ret

00000d06 <__vector_11>:
}
			/********************************* Timer 0 ISR functions ******************************/


	ISR(TIMER0_OVF_vect)
	{
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
		if(Timer0_OVF_Fptr!=NULLptr)
     d28:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <Timer0_OVF_Fptr>
     d2c:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <Timer0_OVF_Fptr+0x1>
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	09 f0       	breq	.+2      	; 0xd36 <__vector_11+0x30>
		{
			Timer0_OVF_Fptr();
     d34:	09 95       	icall
		}
	}
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <__vector_10>:

	ISR(TIMER0_COMP_vect){
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
		Timer0_OC0_Fptr();
     d7a:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Timer0_OC0_Fptr>
     d7e:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Timer0_OC0_Fptr+0x1>
     d82:	09 95       	icall
	}
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER1_OVF_vect)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
	Timer1_OVF_Fptr();
     dc8:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <Timer1_OVF_Fptr>
     dcc:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <Timer1_OVF_Fptr+0x1>
     dd0:	09 95       	icall
}
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
	Timer1_OCA_Fptr();
     e16:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <Timer1_OCA_Fptr>
     e1a:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <Timer1_OCA_Fptr+0x1>
     e1e:	09 95       	icall
}
     e20:	ff 91       	pop	r31
     e22:	ef 91       	pop	r30
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
	Timer1_OCB_Fptr();
     e64:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <Timer1_OCB_Fptr>
     e68:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <Timer1_OCB_Fptr+0x1>
     e6c:	09 95       	icall
}
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	7f 91       	pop	r23
     e7c:	6f 91       	pop	r22
     e7e:	5f 91       	pop	r21
     e80:	4f 91       	pop	r20
     e82:	3f 91       	pop	r19
     e84:	2f 91       	pop	r18
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	4f 93       	push	r20
     ea0:	5f 93       	push	r21
     ea2:	6f 93       	push	r22
     ea4:	7f 93       	push	r23
     ea6:	8f 93       	push	r24
     ea8:	9f 93       	push	r25
     eaa:	af 93       	push	r26
     eac:	bf 93       	push	r27
     eae:	ef 93       	push	r30
     eb0:	ff 93       	push	r31
	Timer1_ICU_Fptr();
     eb2:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <Timer1_ICU_Fptr>
     eb6:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <Timer1_ICU_Fptr+0x1>
     eba:	09 95       	icall
}
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <__vector_5>:
	}

	/********************************* Timer 2 ISR functions ******************************/

	ISR(TIMER2_OVF_vect)
	{
     ede:	1f 92       	push	r1
     ee0:	0f 92       	push	r0
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	0f 92       	push	r0
     ee6:	11 24       	eor	r1, r1
     ee8:	2f 93       	push	r18
     eea:	3f 93       	push	r19
     eec:	4f 93       	push	r20
     eee:	5f 93       	push	r21
     ef0:	6f 93       	push	r22
     ef2:	7f 93       	push	r23
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	ef 93       	push	r30
     efe:	ff 93       	push	r31
		if(Timer2_OVF_Fptr!=NULLptr)
     f00:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <Timer2_OVF_Fptr>
     f04:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <Timer2_OVF_Fptr+0x1>
     f08:	30 97       	sbiw	r30, 0x00	; 0
     f0a:	09 f0       	breq	.+2      	; 0xf0e <__vector_5+0x30>
		{
			Timer2_OVF_Fptr();
     f0c:	09 95       	icall
		}
	}
     f0e:	ff 91       	pop	r31
     f10:	ef 91       	pop	r30
     f12:	bf 91       	pop	r27
     f14:	af 91       	pop	r26
     f16:	9f 91       	pop	r25
     f18:	8f 91       	pop	r24
     f1a:	7f 91       	pop	r23
     f1c:	6f 91       	pop	r22
     f1e:	5f 91       	pop	r21
     f20:	4f 91       	pop	r20
     f22:	3f 91       	pop	r19
     f24:	2f 91       	pop	r18
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <__vector_4>:

	ISR(TIMER2_COMP_vect){
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
		Timer2_OC2_Fptr();
     f52:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <Timer2_OC2_Fptr>
     f56:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <Timer2_OC2_Fptr+0x1>
     f5a:	09 95       	icall
	}
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__divmodsi4>:
     f7e:	05 2e       	mov	r0, r21
     f80:	97 fb       	bst	r25, 7
     f82:	1e f4       	brtc	.+6      	; 0xf8a <__divmodsi4+0xc>
     f84:	00 94       	com	r0
     f86:	0e 94 d6 07 	call	0xfac	; 0xfac <__negsi2>
     f8a:	57 fd       	sbrc	r21, 7
     f8c:	07 d0       	rcall	.+14     	; 0xf9c <__divmodsi4_neg2>
     f8e:	0e 94 fe 07 	call	0xffc	; 0xffc <__udivmodsi4>
     f92:	07 fc       	sbrc	r0, 7
     f94:	03 d0       	rcall	.+6      	; 0xf9c <__divmodsi4_neg2>
     f96:	4e f4       	brtc	.+18     	; 0xfaa <__divmodsi4_exit>
     f98:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__negsi2>

00000f9c <__divmodsi4_neg2>:
     f9c:	50 95       	com	r21
     f9e:	40 95       	com	r20
     fa0:	30 95       	com	r19
     fa2:	21 95       	neg	r18
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	4f 4f       	sbci	r20, 0xFF	; 255
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255

00000faa <__divmodsi4_exit>:
     faa:	08 95       	ret

00000fac <__negsi2>:
     fac:	90 95       	com	r25
     fae:	80 95       	com	r24
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	08 95       	ret

00000fbc <__tablejump2__>:
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	05 90       	lpm	r0, Z+
     fc2:	f4 91       	lpm	r31, Z
     fc4:	e0 2d       	mov	r30, r0
     fc6:	09 94       	ijmp

00000fc8 <__umulhisi3>:
     fc8:	a2 9f       	mul	r26, r18
     fca:	b0 01       	movw	r22, r0
     fcc:	b3 9f       	mul	r27, r19
     fce:	c0 01       	movw	r24, r0
     fd0:	a3 9f       	mul	r26, r19
     fd2:	70 0d       	add	r23, r0
     fd4:	81 1d       	adc	r24, r1
     fd6:	11 24       	eor	r1, r1
     fd8:	91 1d       	adc	r25, r1
     fda:	b2 9f       	mul	r27, r18
     fdc:	70 0d       	add	r23, r0
     fde:	81 1d       	adc	r24, r1
     fe0:	11 24       	eor	r1, r1
     fe2:	91 1d       	adc	r25, r1
     fe4:	08 95       	ret

00000fe6 <__muluhisi3>:
     fe6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__umulhisi3>
     fea:	a5 9f       	mul	r26, r21
     fec:	90 0d       	add	r25, r0
     fee:	b4 9f       	mul	r27, r20
     ff0:	90 0d       	add	r25, r0
     ff2:	a4 9f       	mul	r26, r20
     ff4:	80 0d       	add	r24, r0
     ff6:	91 1d       	adc	r25, r1
     ff8:	11 24       	eor	r1, r1
     ffa:	08 95       	ret

00000ffc <__udivmodsi4>:
     ffc:	a1 e2       	ldi	r26, 0x21	; 33
     ffe:	1a 2e       	mov	r1, r26
    1000:	aa 1b       	sub	r26, r26
    1002:	bb 1b       	sub	r27, r27
    1004:	fd 01       	movw	r30, r26
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <__udivmodsi4_ep>

00001008 <__udivmodsi4_loop>:
    1008:	aa 1f       	adc	r26, r26
    100a:	bb 1f       	adc	r27, r27
    100c:	ee 1f       	adc	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	a2 17       	cp	r26, r18
    1012:	b3 07       	cpc	r27, r19
    1014:	e4 07       	cpc	r30, r20
    1016:	f5 07       	cpc	r31, r21
    1018:	20 f0       	brcs	.+8      	; 0x1022 <__udivmodsi4_ep>
    101a:	a2 1b       	sub	r26, r18
    101c:	b3 0b       	sbc	r27, r19
    101e:	e4 0b       	sbc	r30, r20
    1020:	f5 0b       	sbc	r31, r21

00001022 <__udivmodsi4_ep>:
    1022:	66 1f       	adc	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	1a 94       	dec	r1
    102c:	69 f7       	brne	.-38     	; 0x1008 <__udivmodsi4_loop>
    102e:	60 95       	com	r22
    1030:	70 95       	com	r23
    1032:	80 95       	com	r24
    1034:	90 95       	com	r25
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	bd 01       	movw	r22, r26
    103c:	cf 01       	movw	r24, r30
    103e:	08 95       	ret

00001040 <_exit>:
    1040:	f8 94       	cli

00001042 <__stop_program>:
    1042:	ff cf       	rjmp	.-2      	; 0x1042 <__stop_program>
